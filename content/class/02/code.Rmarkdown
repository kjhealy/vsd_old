---
title: "02 - Code"
date: "2022-01-10"
type: docs
bibliography: "../../../static/bib/references.bib"
csl: "../../../static/bib/chicago-fullnote-bibliography-no-bib.csl"
tags: ["code"]
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE, 
                      fig.retina = 3, fig.align = "center")
```

```{r packages-data}
library(tidyverse)
```

# What R looks like

Code you can type and run:

```{r 02-about-r-1}
## Inside code chunks, lines beginning with a # character are comments
## Comments are ignored by R

my_numbers <- c(1, 1, 2, 4, 1, 3, 1, 5) # Anything after a # character is ignored as well

```

Output:


```{r 02-about-r-2}
my_numbers 
```

By convention, code output in documents is prefixed by `##`

```{r 02-about-r-3}
my_numbers 
```



Also by convention, outputting vectors, etc, gets a counter keeping track of the number of elements. For example,

```{r 02-about-r-4}
letters
```




# It's a calculator

- Arithmetic


```{r 02-about-r-5}
(31 * 12) / 2^4
```

```{r 02-about-r-6}
sqrt(25)
```

```{r 02-about-r-7}
log(100)

log10(100)

```

- Logic

```{r 02-about-r-8}
4 < 10
4 > 2 & 1 > 0.5 # The "&" means "and"
4 < 2 | 1 > 0.5 # The "|" means "or"
4 < 2 | 1 < 0.5
```

- Boolean and Logical operators

Logical equality and inequality (yielding a `TRUE` or `FALSE` result) is done with `==` and `!=`. Other logical operators include `<`, `>`, `<=`, `>=`, and `!` for negation.

```{r 02-about-r-9}

## A logical test
2 == 2
```

```{r 02-about-r-10, eval = FALSE}
## This will cause an error, because R will think you are trying to assign a value
# 2 = 2

## Error in 2 = 2 : invalid (do_set) left-hand side to assignment
```

```{r 02-about-r-11}
3 != 7
```

## Evaluating logical tests

Here's a gotcha. You might think you could write `3 < 5 & 7` and have it be interpreted as "Three is less than five and also less than seven [True or False?]":

```{r 02-about-r-12}
3 < 5 & 7
```


It seems to work!

But now try `3 < 5 & 1`, where your intention is "Three is less than five and also less than one [True or False?]"

```{r 02-about-r-13}
3 < 5 & 1
```

What's happening is that `3 < 5` is evaluated first, and resolves to TRUE, leaving us with the expression `TRUE` `& 1`. R interprets this as `TRUE` `& as.logical(1)`. In Boolean algebra, `1` resolves to TRUE. Any other number is FALSE. So,

```{r 02-about-r-14}
TRUE & as.logical(1)
```

```{r 02-about-r-15}
3 < 5 & 3 < 1
```

You have to make your comparisons explicit.

# Logic and floating point arithmetic

Let's evaluate `0.6 + 0.2 == 0.8`


```{r 02-about-r-16}
0.6 + 0.2 == 0.8
```

Now let's try `0.6 + 0.3 == 0.9`

```{r 02-about-r-17}
0.6 + 0.3 == 0.9
```

Er. That's not right.

Welcome to floating point math!

In Base 10, you can't precisely express fractions like] 1/3 and 1/9. They come out as repeating decimals: 0.3333... or 0.1111... You _can_ cleanly represent fractions that use a prime factor of the base, which in the case of Base 10 are 2 and 5.

Computers represent numbers as binary (i.e. Base 2) floating-points. In Base 2, the only prime factor is 2. So 1/5 or 1/10 in binary would be repeating.

When you do binary math on repeating numbers and convert back to decimals you get tiny leftovers, and this can mess up _logical_ comparisons of equality. The `all.equal()` function exists for this purpose.

```{r 02-about-r-18}
print(.1 + .2)
print(.1 + .2, digits=18)

all.equal(.1 + .2, 0.3)
```


See e.g. [https://0.30000000000000004.com](https://0.30000000000000004.com) 

For now, "Be very careful about doing logical comparisons on floating-point numbers" is not a bad rule.

# 1. Everything in R has a name

```{r 02-about-r-19}
my_numbers # We created this a few minutes ago

letters  # This one is built-in

pi  # Also built-in
```

# Some names are forbidden

Or it's a _really_ bad idea to try to use them 

```{r 02-about-r-20, eval = FALSE}
TRUE
FALSE
Inf
NaN 
NA 
NULL

for
if
while
break
function
```


# 2. Everything is an object

There are a few built-in objects.


```{r 02-about-r-21}
letters
```

```{r 02-about-r-22}
pi
```

```{r 02-about-r-23}

LETTERS
```

# 3. You can create objects

In fact, this is mostly what we will be doing

Objects are created by assigning a thing to a name:

```{r 02-about-r-24}
## name... gets ... this stuff
my_numbers <- c(1, 2, 3, 1, 3, 5, 25, 10)

## name ... gets ... the output of the function `c()`
your_numbers <- c(5, 31, 71, 1, 3, 21, 6, 52)
```


The `c()` function _combines_ or _concatenates_ things

The core thing we do in R is _create objects_ by _assigning a thing to a name_. That thing is usually the output of some _function_. There are a lot of built-in functions.

We can create an object with the `c()` function and the *assignment operator*, `<-`. The `c()` function concatenates things together.


# The assignment operator

- The assignment operator performs the action of creating objects

- Use a keyboard shortcut to write it:

- Press `option` _and_ `-` on a Mac

- Press `alt` _and_ `-` on Windows


# Assignment with `=`

- You can use "`=`" as well as "`<-`" for assignment

```{r 02-about-r-25}
my_numbers = c(1, 2, 3, 1, 3, 5, 25)

my_numbers
```

On the other hand, "`=`" has a different meaning when used in functions.

I'm going to use "`<-`" for assigment throughout. Just be consistent either way.

# 4. Do things to objects with functions


```{r create_objects_again}

## this object... gets ... the output of this function
my_numbers <- c(1, 2, 3, 1, 3, 5, 25, 10)

your_numbers <- c(5, 31, 71, 1, 3, 21, 6, 52)
```

```{r 02-get-started-3}
my_numbers
```

Functions can be identified by the parentheses after their names.

```{r 02-get-started-4}
my_numbers 
```


```{r this_will_error, eval = FALSE}
## If you run this you'll get an error
mean()
```

## What functions usually do

- They take **inputs** to **arguments**

- They perform **actions**

- They produce, or return, **outputs**

```{r 02-about-r-26}
## Get the mean of what? Of x.
## You need to tell the function what x is
mean(x = my_numbers)

mean(x = your_numbers)
```

If you don't _name_ the arguments, R assumes you are providing them in the order the function expects.

```{r 02-about-r-27}
mean(your_numbers)
```

What arguments? Which order? Read the function's help page.

```{r 02-about-r-28, eval=FALSE}
help(mean)
```

```{r 02-about-r-29, eval = FALSE}
## quicker
?mean
```

- Arguments often tell the function what to do in specific circumstances

```{r 02-about-r-30}
missing_numbers <- c(1:10, NA, 20, 32, 50, 104, 32, 147, 99, NA, 45)

mean(missing_numbers)

mean(missing_numbers, na.rm = TRUE)
```

Or select from one of several options:

```{r 02-about-r-31}
## Look at ?mean to see what `trim` does
mean(missing_numbers, na.rm = TRUE, trim = 0.1)
```


There are all kinds of functions. They return different things.

```{r 02-about-r-32}
summary(my_numbers)
```

You can assign the output of a function to a name, which turns it into an object. (Otherwise it'll send its output to the console.)

```{r 02-about-r-33}
my_summary <- summary(my_numbers)

my_summary
```

Objects hang around in your work environment until they are overwritten by you, or are deleted.

```{r 02-about-r-34, eval = FALSE}
## rm() function removes objects
rm(my_summary)

my_summary

## Error: object 'my_summary' not found
```

## Functions can be nested

```{r 02-about-r-35}
c(1:20)
```


```{r 02-about-r-36}
mean(c(1:20))
```


```{r 02-about-r-37}
summary(mean(c(1:20)))
```

```{r 02-about-r-38}
names(summary(mean(c(1:20))))
```


```{r 02-about-r-39}
length(names(summary(mean(c(1:20)))))
```


Nested functions are evaluated from the inside out.

-
# Use the pipe operator: `%>%`

Instead of nesting functions in parentheses, we can use the _pipe operator_:


```{r 02-about-r-40}
c(1:20) %>% mean() %>% summary() %>% names() %>%  length()
```


Read this operator as "**and then**"

Better, vertical space is free in R:


```{r 02-about-r-41}
c(1:20) %>% 
  mean() %>% 
  summary() %>% 
  names() %>% 
  length()
```

Piped operations make code more readable

Not great, Bob:

```r
  serve(stir(pour_in_pan(whisk(crack_eggs(get_from_fridge(eggs), into = "bowl"), len = 40), temp = "med-high")))
```

Notice how the first thing you read is the last operation performed.

Really not much better:

```r
serve(
  stir(
    pour_in_pan(
      whisk(
        crack_eggs(
          get_from_fridge(eggs), 
        into = "bowl"), 
      len = 40), 
    temp = "med-high")
  )
)
```

Much nicer:

```r
eggs %>% 
  get_from_fridge() %>% 
  crack_eggs(into = "bowl") %>% 
  whisk(len = 40) %>% 
  pour_in_pan(temp = "med-high") %>% 
  stir() %>% 
  serve()

```

We'll still use nested parentheses quite a bit, often in the context of a function working inside a pipeline. But it's good not to have too many levels of nesting.

# Now showing at an R near you: `|>`

The pipe operator **`%>%`** is not part of Base R. It was introduced in a package called `magrittr`. 

It's been so successful, a version of it has been incorporated into Base R.

It is denoted by **`|>`**. But! It does not _quite_ replace **`%>%`** in every case.\* 

The magrittr pipe will continue to work.

# Functions are bundled into packages

Packages are loaded into your working environment using the `library()` function.

```{r 02-about-r-42}
## A package containing a dataset rather than functions
library(gapminder)

gapminder
```

You need only _install_ a package once (and occasionally update it). But you must _load_ the package in each R session before you can access its contents.

```{r 02-about-r-43, eval = FALSE}
## Do at least once for each package. Once done, not needed each time.
install.packages("palmerpenguins", repos = "http://cran.rstudio.com")

## Needed sometimes, especially after an R major version upgrade.
update.packages(repos = "http://cran.rstudio.com")

```


```{r 02-about-r-44}
## To load a package, usually at the start of your RMarkdown document or script file
library(palmerpenguins)
penguins
```


# 5. Objects come in types and classes

I'm going to speak somewhat loosely here for now, and gloss over some distinctions between object classes and data structures, as well as kinds of objects and their attributes.

The object inspector in RStudio is your friend.

You can ask an object what it is. 

```{r 02-about-r-49}
class(my_numbers)
typeof(my_numbers)
```

Objects can have more than one (nested) class:

```{r 02-about-r-50}
summary(my_numbers)

my_smry <- summary(my_numbers) # remember, outputs can be assigned to a name, creating an object

class(summary(my_numbers)) # functions can be nested, and are evaluated from the inside out

class(my_smry) # equivalent to the previous line
```


```{r 02-about-r-51}
typeof(my_smry)
attributes(my_smry)

## In this case, the functions extract the corresponding attribute
class(my_smry)
names(my_smry)
```

## Vector types can't be heterogenous 

Objects can be manually or automatically coerced from one class to another. Take care.

```{r 02-get-started-9}
class(my_numbers)

my_new_vector <- c(my_numbers, "Apple")

my_new_vector # vectors are homogeneous/atomic

class(my_new_vector)
```

```{r 02-about-r-54}
my_dbl <- c(2.1, 4.77, 30.111, 3.14519)
is.double(my_dbl)

my_dbl <- as.integer(my_dbl)

my_dbl

```

# A table of data is a kind of list

```{r 02-about-r-55}
gapminder # tibbles and data frames can contain vectors of different types

class(gapminder)
typeof(gapminder) # hmm

```

Underneath, most complex R objects are some kind of list with different components.


- A _data frame_ is a list of vectors of the same length, where the vectors can be of different types (e.g. numeric, character, logical, etc)

- A _tibble_ is an enhanced data frame 

# Some classes are nested

- Base R's trusty `data.frame`

```{r titanic1}
library(socviz)
titanic
class(titanic)
```

```{r titanic2}
## The `$` idiom picks out a named column here; 
## more generally, the named element of a list
titanic$percent  
```


- The Tidyverse's enhanced `tibble`

```{r titanic3}
## tibbles are build on data frames 
titanic_tb <- as_tibble(titanic) 
class(titanic)
titanic_tb
class(titanic_tb)
```

Tidyverse tools are generally _type safe_, meaning their functions return the same type of thing every time, or fail if they cannot do this. So it's good to know about the various data types.


# 6. Arithmetic on vectors

In R, all numbers are vectors of different sorts. Even single numbers ("scalars") are conceptually vectors of length 1.

- Arithmetic on vectors follows a series of _recycling rules_ that favor ease of expression of vectorized, "elementwise" operations.

- See if you can predict what the following operations do: 

```{r 02-about-r-57}
my_numbers

result1 <- my_numbers + 1

```

```{r 02-about-r-58}
result1
```

```{r 02-about-r-59}
result2 <- my_numbers + my_numbers

```

```{r 02-about-r-60}
result2
```

```{r 02-about-r-61, warning=TRUE}
two_nums <- c(5, 10)

result3 <- my_numbers + two_nums

```

```{r 02-about-r-62}
result3
```

```{r 02-about-r-63, warning=TRUE}
three_nums <- c(1, 5, 10)

result4 <- my_numbers + three_nums

```

```{r 02-about-r-64}
result4
```

Note that you get a _warning_ here. It'll still do it, though! Don't ignore warnings until you understand what they mean.



