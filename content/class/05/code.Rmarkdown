---
title: "Code"
date: "2022-01-27"
bibliography: "../../../static/bib/references.bib"
csl: ../../../static/bib/chicago-syllabus-no-bib.csl
tags: ["code"]
weight: 2
editor_options: 
  chunk_output_type: console
---

## Ulysses

```{r}
#install.packages("gutenbergr")
#install.packages("tidytext")
#install.packages("textdata")
library(tidyverse)
library(gutenbergr)
library(tidytext)

## Get Ulysses
raw_text <- gutenberg_download(4300) 
```


```{r}
full_text <- raw_text %>% 
  mutate(line=row_number()) %>% 
  unnest_tokens(word,text)

full_text[30:51,] %>% 
  print(n = Inf)

tail(full_text, n = 20)
```

## Word counts

```{r}
tidy_book_count <- full_text %>% 
  count(word, sort=TRUE)

tidy_book_count_stop <- full_text %>% 
  anti_join(stop_words) %>% 
  count(word, sort=TRUE)
```


## Remove stopwords

```{r}
full_text %>%
  anti_join(stop_words) %>%
  filter(! str_detect(word, "'")) %>%
  filter(! str_detect(word, "â€™")) %>%
  count(word, sort = TRUE) %>%
  top_n(20) %>%
  mutate(word=reorder(word, n))
```

## Elementary Setiment Analysis

```{r}
full_text %>% 
  inner_join(get_sentiments("bing")) %>%
  count(sentiment, word, sort = TRUE) %>%
  group_by(sentiment) %>%
  top_n(20) %>%
  ungroup() %>%
  mutate(word=reorder(word,n)) %>% 
  ggplot(mapping = aes(x = n, 
                       y = word, 
                       fill=sentiment))+
  geom_col() +
  guides(fill = "none") + 
  facet_wrap(~ sentiment, 
             scales = "free")
```

## Use a different sentiment dictionary

```{r, fig.width=6, fig.height=10, out.width="90%"}
full_text %>% 
  inner_join(get_sentiments("nrc")) %>%
  count(sentiment, word, sort = TRUE) %>%
  group_by(sentiment) %>%
  top_n(20) %>%
  ungroup() %>%
  mutate(word=reorder(word,n)) %>% 
  ggplot(mapping = aes(x = n, 
                       y = word, 
                       fill=sentiment))+
  geom_col() +
  guides(fill = "none") + 
  facet_wrap(~ sentiment, 
             scales = "free", 
             ncol = 3)


```


## Bigrams

```{r}
tidy_ngram <- raw_text %>% 
  unnest_tokens(bigram, text, 
                token = "ngrams", n = 2) %>% 
  separate(bigram, c("word1", "word2"), sep=" ") %>%
  filter(!word1 %in% stop_words$word, !word2 %in% stop_words$word) %>%
  count(word1, word2, sort = TRUE)


he_she <- raw_text %>%
  unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
  separate(bigram, c("word1", "word2"), sep=" ") %>%
  filter(word1 %in% c("he", "she", "they")) %>%
  filter(!word2 %in% stop_words$word, !str_detect(word2, "'")) %>%
  count(word1, word2, sort=TRUE)

he_she %>% 
  group_by(word1) %>% 
  top_n(20) %>% 
  ggplot(mapping = aes(x=n, y=word2, 
                     fill=word1)) +
  geom_col() +
  guides(fill = "none") + 
  facet_wrap(~ word1, scales="free")
```

```{r}
bloom_stephen <- raw_text %>%
  unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
  separate(bigram, c("word1", "word2"), sep=" ") %>%
  filter(word1 %in% c("bloom", "stephen", "mulligan", "molly")) %>%
  filter(!word2 %in% stop_words$word, !str_detect(word2, "'")) %>%
  count(word1, word2, sort=TRUE)

bloom_stephen %>% 
  group_by(word1) %>% 
  top_n(10) %>% 
  ggplot(mapping = aes(x=n, y=word2, 
                     fill=word1)) +
  geom_col() +
  guides(fill = "none") + 
  facet_wrap(~ word1, scales="free")

```

## Sequence of words

```{r}
full_text %>% 
  inner_join(get_sentiments("bing")) %>%
  count(index = line %/% 2000, sentiment) %>%
  pivot_wider(names_from = sentiment, 
              values_from = n, values_fill = 0) %>% 
  mutate(sentiment = positive - negative) %>% 
  ggplot(mapping = aes(index, sentiment)) +
  geom_col(show.legend = FALSE) 
```

