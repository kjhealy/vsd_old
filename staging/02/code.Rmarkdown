---
title: "02: Up and Running"
date: "2020-08-21"
menu:
  show:
    parent: Examples
    weight: 1
type: docs
bibliography: "../../../static/bib/references.bib"
csl: "../../../static/bib/chicago-fullnote-bibliography-no-bib.csl"
slides: "01-slides"



editor_options: 
  chunk_output_type: console
---

```{r knitr-opts, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
``` 

## Overview

This page was produced from an RMarkdown document (like almost all the content on this site). Try creating a parallel document yourself. 

## Load Libraries

```{r setup, include=TRUE, message = FALSE}
library(gapminder)
library(here)
library(tidyverse)
library(socviz)
```

A code chunk:

```{r 02-get-started-1}
# This is a code chunk with a comment in it

# 
```

# Things to know about R

*Everything has a name*

```{r 02-get-started-2}

```


*Everything is an object*

```{r letters}
letters
```

```{r pi}
pi
```

There aren't many built-in objects. 

The core thing we do in R is _create objects_ by _assigning a thing to a name_. That thing is usually the output of some _function_. There are a lot of built-in functions.

We can create an object with the `c()` function and the *assignment operator*, `<-`. The `c()` function concatenates things together.

```{r create_objects}

## this object ... gets ... the output of this function
my_numbers <- c(1, 2, 3, 1, 3, 5, 25)

your_numbers <- c(5, 31, 71, 1, 3, 21, 6)
```

```{r 02-get-started-3}
my_numbers
```

*You do things using functions*

Functions can be identified by the parentheses after their names.

```{r 02-get-started-4}
my_numbers
```


```{r this_will_error, eval = FALSE}
mean()
```

Functions take arguments. 

```{r 02-get-started-5}

# Get the mean of what? Of x.
mean(x = my_numbers)

mean(x = your_numbers)
```

```{r 02-get-started-6}
mean(my_numbers)
```

```{r 02-get-started-7}
my_summary <- summary(my_numbers)
```


```{r 02-get-started-8}
my_summary
```


### Functions are bundled into thematic packages, which you load with the `library()` command

Datasets can also be bundled into packages. Here we load the `gapminder` package, which contains a dataset of that name.

```{r gapminder}
library(gapminder)

gapminder
```

You only have to _install_ a package once, or whenever it is updated. But if you want to make use of it,  you must _load_ it (with `library()`) at the start of your R session. You can do this in the first chunk of your RMarkdown file, for example.


```{r output}

table(my_numbers)

sd(my_numbers)

my_numbers * 5

my_numbers + 1

my_numbers + my_numbers

```

### If you're not sure what an object is, ask for its class

```{r getclass}
class(my_numbers)
class(my_summary)
class(summary)
```


```{r 02-get-started-9}
my_new_vector <- c(my_numbers, "Apple")
my_new_vector
class(my_new_vector)
```


```{r titanic1}
titanic
class(titanic)
```

```{r titanic2}
titanic$percent
```


```{r titanic3}
titanic_tb <- as_tibble(titanic)
titanic_tb
```


### Use use RStudio's object inspector to see what's inside an object


